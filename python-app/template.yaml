apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-flask-demo-template
  title: Python Flask Demo Application
  description: Creates a Python Flask application with REST API endpoints, Docker containerization, Kubernetes deployment, and Jenkins CI/CD
spec:
  owner: development
  type: service

  parameters:
    - title: Application Configuration
      required:
        - component_id
        - user_name
      properties:
        component_id:
          title: Component name
          type: string
          description: Provide a component (microservice) name
          pattern: '^([a-zA-Z][a-zA-Z0-9]*)(-[a-zA-Z0-9]+)*$'
        user_name:
          title: Application User
          type: string
          description: The user name that will be used in the application greeting (only letters, numbers, and underscores allowed)
          pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
          default: 'BackstageUser'

    - title: Jenkins Configuration
      required:
        - jenkins_server
      properties:
        jenkins_server:
          title: Jenkins Server URL
          type: string
          description: Your Jenkins server URL (e.g., http://jenkins.local:8080)
          pattern: '^https?://.*'
          default: 'http://jenkins.local:8080'

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          app_name: ${{parameters.component_id}}
          user_name: ${{parameters.user_name}}
          jenkins_server: ${{parameters.jenkins_server}}

    - id: publish
      name: Publish
      action: publish:github
      input:
        description: Python Flask Demo Application - ${{ parameters.component_id }}
        repoUrl: github.com?owner=qburst-praven&repo=${{parameters.component_id}}
        protectDefaultBranch: false
        repoVisibility: public

    - id: jenkins-job
      name: Create Jenkins Job
      action: http:backstage:request
      input:
        method: POST
        path: /proxy/jenkins/createItem?name=${{ parameters.component_id }}-pipeline
        headers:
          Content-Type: application/xml
        body: |
          <?xml version='1.1' encoding='UTF-8'?>
          <flow-definition plugin="workflow-job">
            <description>CI/CD Pipeline for ${{ parameters.component_id }}</description>
            <keepDependencies>false</keepDependencies>
            <properties>
              <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
                <triggers>
                  <com.cloudbees.jenkins.GitHubPushTrigger plugin="github">
                    <spec></spec>
                  </com.cloudbees.jenkins.GitHubPushTrigger>
                </triggers>
              </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            </properties>
            <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps">
              <scm class="hudson.plugins.git.GitSCM" plugin="git">
                <configVersion>2</configVersion>
                <userRemoteConfigs>
                  <hudson.plugins.git.UserRemoteConfig>
                    <url>${{ steps['publish'].output.remoteUrl }}</url>
                  </hudson.plugins.git.UserRemoteConfig>
                </userRemoteConfigs>
                <branches>
                  <hudson.plugins.git.BranchSpec>
                    <name>*/main</name>
                  </hudson.plugins.git.BranchSpec>
                </branches>
                <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
                <submoduleCfg class="empty-list"/>
                <extensions/>
              </scm>
              <scriptPath>Jenkinsfile</scriptPath>
              <lightweight>true</lightweight>
            </definition>
            <triggers/>
            <disabled>false</disabled>
          </flow-definition>

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Jenkins Job
        url: ${{ parameters.jenkins_server }}/job/${{ parameters.component_id }}-pipeline
      - title: API Documentation
        url: ${{ steps['publish'].output.remoteUrl }}/blob/main/README.md
